plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'com.justjournal'
version = '1.2.0'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

java {
    withSourcesJar()
    withJavadocJar()
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

jar {
    archiveBaseName = 'justjournal-xmlrpc'
    manifest {
        attributes(
                'Implementation-Title': 'JustJournal XML-RPC Library',
                'Implementation-Version': archiveVersion
        )
    }
}

tasks.register('clientJar', Jar) {
    archiveBaseName = 'justjournal-xmlrpc-client'
    archiveVersion = project.version
    from sourceSets.main.output
    include 'com/justjournal/xmlrpc/util/Base64.class'
    include 'com/justjournal/xmlrpc/XmlRpcValue.class'
    include 'com/justjournal/xmlrpc/XmlRpcArray.class'
    include 'com/justjournal/xmlrpc/XmlRpcStruct.class'
    include 'com/justjournal/xmlrpc/XmlRpcMessages.class'
    include 'com/justjournal/xmlrpc/XmlRpcClient*.class'
    include 'com/justjournal/xmlrpc/XmlRpcCallback*.class'
    include 'com/justjournal/xmlrpc/XmlRpcProxy.class'
    include 'com/justjournal/xmlrpc/XmlRpcException.class'
    include 'com/justjournal/xmlrpc/XmlRpcFault.class'
    include 'com/justjournal/xmlrpc/XmlRpcParser.class'
    include 'com/justjournal/xmlrpc/XmlRpcSerializer.class'
    include 'com/justjournal/xmlrpc/XmlRpcCustomSerializer.class'
    include 'com/justjournal/xmlrpc/XmlRpcInvocationHandler.class'
    include 'com/justjournal/xmlrpc/serializers/*.class'
    include '**/*.properties'
}

javadoc {
    options.author = true
    options.version = true
    options.use = true
    options.breakIterator = true
    options.tags = [ "todo:a:To do:" ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact clientJar
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}