plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '6.6.3'
    id 'jacoco'
    id "org.sonarqube" version "6.1.0.5360"
}

group = 'com.justjournal'
version = '1.3.1'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

jacoco {
    toolVersion = "0.8.10"
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    implementation 'org.slf4j:slf4j-api:2.0.7'
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.7' // or any other SLF4J implementation

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.platform:junit-platform-reporting:1.9.3'
}

lombok {
    version = "1.18.34"
}

java {
    withSourcesJar()
    withJavadocJar()
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }

    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

jar {
    archiveBaseName = 'justjournal-xmlrpc'
    manifest {
        attributes(
                'Implementation-Title': 'JustJournal XML-RPC Library',
                'Implementation-Version': archiveVersion
        )
    }
}

tasks.register('clientJar', Jar) {
    archiveBaseName = 'justjournal-xmlrpc-client'
    archiveVersion = project.version
    from sourceSets.main.output
    include 'com/justjournal/xmlrpc/util/Base64.class'
    include 'com/justjournal/xmlrpc/XmlRpcValue.class'
    include 'com/justjournal/xmlrpc/XmlRpcArray.class'
    include 'com/justjournal/xmlrpc/XmlRpcStruct.class'
    include 'com/justjournal/xmlrpc/XmlRpcMessages.class'
    include 'com/justjournal/xmlrpc/XmlRpcClient*.class'
    include 'com/justjournal/xmlrpc/XmlRpcCallback*.class'
    include 'com/justjournal/xmlrpc/XmlRpcProxy.class'
    include 'com/justjournal/xmlrpc/XmlRpcException.class'
    include 'com/justjournal/xmlrpc/XmlRpcFault.class'
    include 'com/justjournal/xmlrpc/XmlRpcParser.class'
    include 'com/justjournal/xmlrpc/XmlRpcSerializer.class'
    include 'com/justjournal/xmlrpc/XmlRpcCustomSerializer.class'
    include 'com/justjournal/xmlrpc/XmlRpcInvocationHandler.class'
    include 'com/justjournal/xmlrpc/serializers/*.class'
    include '**/*.properties'
}

javadoc {
    options.author = true
    options.version = true
    options.use = true
    options.breakIterator = true
    options.tags = [ "todo:a:To do:" ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(clientJar) {
                classifier = 'client'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    reports {
        junitXml.required = true
        html.required = true
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
     getExecutionData().from(fileTree(project.projectDir).include("/jacoco/*.exec"))
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "JustJournal_xml-rpc"
        property "sonar.organization", "justjournal"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}